#In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data. I asked several questions to analyze the data.

#1. How many orders were placed in January? 
SELECT COUNT(orderid) FROM BIT_DB.JanSales
WHERE length(orderid) = 6
AND orderid <> 'Order ID';

#2. How many of those orders were for an iPhone? 
SELECT COUNT(orderid) FROM BIT_DB.JanSales
WHERE Product='iPhone'
AND length(orderid) = 6
AND orderid <> 'Order ID';

#3. Select the customer account numbers for all the orders that were placed in February.
SELECT distinct acctnum FROM BIT_DB.customers cust
INNER JOIN BIT_DB.FebSales feb
ON cust.order_id = feb.orderID
WHERE length(orderid) = 6
AND orderid <> 'Order ID';

#4. Which product was the cheapest one sold in January, and what was the price? 
SELECT distinct Product, price FROM BIT_DB.JanSales
WHERE price in (SELECT min(price) FROM BIT_DB.JanSales);

#5. What is the total revenue for each product sold in January?
SELECT SUM(Quantity) * price AS revenue, Product FROM BIT_DB.JanSales
GROUP BY Product;

#6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
SELECT SUM(Quantity) * price AS revenue, Product, SUM(Quantity) FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY product;

#7. How many customers ordered more than 2 products at a time, and what was the average amount spent for those customers? 
SELECT COUNT(distinct customers.acctnum), AVG(quantity)*price FROM BIT_DB.FebSales
LEFT JOIN BIT_DB.customers
ON FebSales.orderID = customers.order_id
WHERE FebSales.Quantity>2
AND length(orderid) = 6
AND orderid <> 'Order ID';

#8. Different ways of filtering data by date.
SELECT orderdate FROM BIT_DB.FebSales
WHERE orderdate BETWEEN '02/13/19 00:00' AND '02/18/19 00:00';

SELECT location FROM BIT_DB.FebSales
WHERE orderdate = '02/18/19 01:35';

SELECT SUM(Quantity) FROM BIT_DB.FebSales
WHERE orderdate LIKE '02/18/19%';

#9. Use of LIKE and % to search.
SELECT DISTINCT Product FROM BIT_DB.FebSales
WHERE Product LIKE '%Batteries%';

SELECT DISTINCT Product, price FROM BIT_DB.FebSales
WHERE price LIKE '%.99';

#10. List all the products sold in Los Angeles in February, and include how many of each were sold.
SELECT Product, SUM(Quantity) FROM BIT_DB.FebSales
WHERE location LIKE '%Los Angeles%'
GROUP BY Product;

#11. Which locations in New York received at least 3 orders in January, and how many orders did they each receive?
SELECT distinct location, COUNT(orderID) FROM BIT_DB.JanSales
WHERE location LIKE '%NY%'
AND length(orderid) = 6
AND orderid <> 'Order ID'
GROUP BY location
HAVING COUNT(OrderID)>2;

#12. How many of each type of headphone were sold in February?
SELECT Product, SUM(Quantity) AS Quantity FROM BIT_DB.FebSales
WHERE Product LIKE '%headphone%'
AND length(orderid) = 6
AND orderid <> 'Order ID'
GROUP BY Product;

#13. What was the average amount spent per account in February?
SELECT (SUM(Quantity)*price)/COUNT(cust.acctnum) FROM BIT_DB.FebSales feb
LEFT JOIN BIT_DB.customers cust
ON feb.orderID = cust.order_id
AND length(orderid) = 6
AND orderid <> 'Order ID';

#14. What was the average quantity of products purchased per account in February? 
SELECT SUM(Quantity)/COUNT(cust.acctnum) FROM BIT_DB.FebSales feb
LEFT JOIN BIT_DB.customers cust
ON feb.orderID = cust.order_id
WHERE length(orderid) = 6
AND orderid <> 'Order ID';

#15. Which product brought in the most revenue in January and how much revenue did it bring in total?
SELECT Product, SUM(Quantity*price) FROM BIT_DB.JanSales
WHERE length(orderid) = 6
AND orderid <> 'Order ID'
GROUP BY Product
ORDER BY SUM(Quantity*price) DESC
LIMIT 1;
